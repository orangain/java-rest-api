/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'

mainClassName = 'com.example.Main'
applicationDefaultJvmArgs = ['-Duser.timezone=UTC']

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    implementation 'org.glassfish.jersey.core:jersey-server:2.27'
    implementation 'org.glassfish.jersey.containers:jersey-container-jetty-servlet:2.27'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.27'
    implementation 'org.glassfish.jersey.media:jersey-media-moxy:2.27'
    implementation 'org.glassfish.jersey.ext:jersey-bean-validation:2.27'
    implementation 'org.eclipse.jetty:jetty-server:9.4.10.v20180503'
    implementation 'org.eclipse.jetty:jetty-servlet:9.4.10.v20180503'
    implementation 'org.mybatis:mybatis:3.4.6'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'mysql:mysql-connector-java:8.0.11'
    implementation 'commons-beanutils:commons-beanutils:1.9.3'
    implementation 'io.swagger.core.v3:swagger-jaxrs2:2.0.2'
    implementation 'io.swagger.core.v3:swagger-jaxrs2-servlet-initializer:2.0.2'

    testImplementation 'org.codehaus.groovy:groovy-all:2.4.15'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.27'
}

test {
	environment 'DATABASE_URL', 'jdbc:mysql://root:password@localhost/sakila?useSSL=false'
	systemProperty 'user.timezone', 'UTC' // Use UTC
	testLogging {
		exceptionFormat 'full'
		events 'skipped', 'passed', 'failed', 'standardError'
	}
}

// Task to download dependencies.
// See: https://stackoverflow.com/a/37442191
task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.findAll{ it.canBeResolved }.each { configuration ->
                configuration.resolve()
            }
            subProject.configurations.findAll{ it.canBeResolved }.each { configuration ->
                configuration.resolve()
            }
        }
    }
}
