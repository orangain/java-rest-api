<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.sqlmapper.FilmMapper">
	<sql id="sqlSelectFilm">
		SELECT
			f.film_id,
			f.title,
			f.description,
			f.release_year,
			f.original_language_id,
			f.rental_duration,
			f.rental_rate,
			f.length,
			f.replacement_cost,
			f.rating,
			f.special_features,
			f.last_update AS f_last_update,
			l.language_id,
			l.name AS l_name,
			l.last_update AS l_last_update,
			fa.film_id,
			fa.last_update AS fa_last_update,
			a.actor_id,
			a.first_name,
			a.last_name,
			a.last_update AS a_last_update
		FROM film AS f
		LEFT JOIN language AS l ON f.language_id = l.language_id
		LEFT JOIN film_actor AS fa ON f.film_id = fa.film_id
		LEFT JOIN actor AS a ON fa.actor_id = a.actor_id
	</sql>

	<select id="selectFilm" resultMap="filmResultMap">
		<include refid="sqlSelectFilm"/>
		WHERE f.film_id = #{filmId}
	</select>

	<select id="selectFilms" resultMap="filmResultMap">
		<include refid="sqlSelectFilm"/>
		<where>
			<if test="filter.filmId != null">
				AND f.film_id = #{filter.filmId}
			</if>
			<if test="filter.releaseYear != null">
				AND f.release_year = #{filter.releaseYear}
			</if>
			<if test="filter.rentalDuration != null">
				AND f.rental_duration = #{filter.rentalDuration}
			</if>
	    </where>
	    ORDER BY
		<choose>
			<when test="sort == '-filmId'">
				f.film_id DESC,
			</when>
			<when test="sort == 'rentalDuration'">
				f.rental_duration,
			</when>
			<when test="sort == '-rentalDuration'">
				f.rental_duration DESC,
			</when>
			<otherwise>
				f.film_id,
			</otherwise>
		</choose>
		a.actor_id
	</select>

	<resultMap id="filmResultMap" type="com.example.dto.Film">
		<id property="filmId" column="film_id" />
		<result property="title" column="title" />
		<result property="description" column="description" />
		<result property="releaseYear" column="release_year" />
		<result property="originalLanguageId" column="original_language_id" />
		<result property="rentalDuration" column="rental_duration" />
		<result property="rentalRate" column="rental_rate" />
		<result property="length" column="length" />
		<result property="replacementCost" column="replacement_cost" />
		<result property="rating" column="rating" />
		<result property="specialFeatures" column="special_features" />
		<result property="lastUpdate" column="f_last_update" />
		<association property="language" javaType="com.example.dto.Film$LanguageInFilm">
			<id property="languageId" column="language_id" />
			<result property="name" column="l_name" />
			<result property="lastUpdate" column="l_last_update" />
		</association>
		<collection property="actors" ofType="com.example.dto.FilmActor" notNullColumn="actor_id">
			<id property="filmId" column="film_id" />
 			<id column="actor_id" />
			<result property="lastUpdate" column="fa_last_update" />
			<association property="actor"
				javaType="com.example.dto.Actor">
				<id property="actorId" column="actor_id" />
				<result property="firstName" column="first_name" />
				<result property="lastName" column="last_name" />
				<result property="lastUpdate" column="a_last_update" />
			</association>
		</collection>
	</resultMap>
	
	<insert id="insertFilm" parameterType="com.example.dto.Film" useGeneratedKeys="true" keyProperty="filmId">
		INSERT INTO film
			(title, description, release_year, language_id, original_language_id, rental_duration, rental_rate,
			 length, replacement_cost, rating, special_features, last_update)
		VALUES
			(#{title}, #{description}, #{releaseYear}, #{language.languageId}, #{originalLanguageId}, #{rentalDuration}, #{rentalRate},
			 #{length}, #{replacementCost}, #{rating}, #{specialFeatures}, #{lastUpdate})
	</insert>

	<update id="updateFilm" parameterType="com.example.dto.Film">
		UPDATE film
		<set>
			<if test="hasTitleChanged">title = #{title},</if>
			<if test="hasDescriptionChanged">description = #{description},</if>
			<if test="hasReleaseYearChanged">release_year = #{releaseYear},</if>
			<if test="hasLanguageChanged">language_id = #{language.languageId},</if>
			<if test="hasOriginalLanguageIdChanged">original_language_id = #{originalLanguageId},</if>
			<if test="hasRentalDurationChanged">rental_duration = #{rentalDuration},</if>
			<if test="hasRentalRateChanged">rental_rate = #{rentalRate},</if>
			<if test="hasLengthChanged">length = #{length},</if>
			<if test="hasReplacementCostChanged">replacement_cost = #{replacementCost},</if>
			<if test="hasRatingChanged">rating = #{rating},</if>
			<if test="hasSpecialFeaturesChanged">special_features = #{specialFeatures},</if>
			<if test="hasLastUpdateChanged">last_update = #{lastUpdate},</if>
		</set>
		<where>
			film_id = #{filmId}
		</where>
		LIMIT 1
	</update>

	<delete id="deleteFilm">
		DELETE FROM film WHERE film_id = #{filmId} LIMIT 1
	</delete>

	<insert id="insertFilmActors" parameterType="list">
		INSERT INTO film_actor
			(film_id, actor_id, last_update)
		VALUES
			<foreach item="item" collection="list" separator=",">
				(#{item.filmId}, #{item.actor.actorId}, #{item.lastUpdate})
			</foreach>
	</insert>

	<delete id="deleteFilmActors">
		DELETE FROM film_actor WHERE film_id = #{filmId}
	</delete>
</mapper>
